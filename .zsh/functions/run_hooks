#autoload

# NOTE!  This file not only gets used by zsh, but by
# .shared_env, and so has to work when source'd from
# any sh-compatible shell.  Well, any sensible sh.

# Example usage:
#
#   run_hooks .shared_env.d
#
# would be the last thing executed by ${ZDOTDIR:-$HOME}/.shared_env,
# and would check for files under .shared_env.d in the $ZDOTDIRPATH
# search path, which would be this (in order):
#
#   * $ZDOTDIR/.shared_env.d/*
#   * $HOME/.shared_env.d/*
#
# i.e. from least specific to most specific.
#
# Ditto for .zshrc, .bashrc etc.
#
# Additionally, if a directory entry has one of the following formats,
# it is treated specially:
#
#   * person-$individual_uuid
#     
#     Run directory contents if $individual_uuid equals
#     $ZDOTUSER.  This should be unique to a person (*not* a uid);
#     e-mail addresses are recommended, similar in idea to GNU arch's
#     global archive namespace.
#     
#   * host-$hostname
#     
#     Run directory contents if $hostname equals the current hostname.
#     If there is ambiguity with regards to FQDN or non-FQDN, the code
#     gives the benefit of the doubt in favour of a match.
#
#   * uid-$username
#     
#     Run directory contents if $username equals the current
#     (non-numeric) uid.  An additional special case: if $username
#     equals 'OWNER', the hook is only run if the current user owns
#     the hook file.  This allows uid-specific hooks to be installed
#     in multiple home directories independently of their filename.

# Requirements and rationale for search algorithm:
#
#  * Must allow me to share config with friends.  Accomplished by setting
#    ZDOTDIR to point to my home directory when running as another uid.
#    (We use the parameter name 'ZDOTDIR' because zsh supports it natively
#    when looking for core start-up files, defaulting to $HOME if it's not
#    set.  But we extend the usage of the ZDOTDIR concept via this file
#    to include our own non-core start-up files such as .shared_env.)
#
#  * When others use my config, their environment must not be polluted
#    with stuff specific to me.  Accomplished by keeping all personal
#    stuff in the .${dotfile}.d/person-$ZDOTUSER namespace, where
#    $ZDOTUSER is something globally unique like the individual's
#    email address.  (Although in my case, 'aspiers' is almost
#    certainly "unique enough" for practical purposes, if that
#    expression's not too much of an oxymoron.)
#
#  * Must allow me to switch uid and still use config.  Accomplished by
#    setting ZDOTDIR=~aspiers and ZDOTUSER to my chosen individual UUID
#    value.
#
#  * Must allow per-uid config which would potentially span machines if home
#    directories are shared (e.g. on NFS).  It makes obvious sense to put any
#    per-uid config in the uid's home directory.  This is what the
#    ".${dotfile}.d/uid-OWNER" syntax is for.
# 
#  * Inheritance should be used wherever possible, i.e. ensuring that more
#    settings for specific contexts can override less specific contexts by
#    being loaded later.  [Eh?  You don't need inheritance for that ...]
#
# Other considerations:
#
#  * Current search order doesn't allow specific contexts to override
#    decisions made in less specific contexts without coupling more specific
#    contexts to knowledge of the consequences of those decisions (i.e.
#    you have to know what effects to manually reverse).
#
#  * Finer granularity (more, smaller files) allows easier overriding
#    in specific contexts which solves above issue and makes other
#    things better e.g. setting users/hosts to complete.  This could be
#    prohibitively slow over NFS, but we'll cross that bridge when we come
#    to it, e.g. via some kind of prior compilation into one big .zwc ?
#
#  * Would be nice to provide user with list of things which can be overridden.
#    This can be achieved simply by grepping for run_hooks invocations.
#
#  * Need to support find_hooks for emacs and other non-shell-based
#    environments which invoke the hooks in a different way.#    
#  
#  * ZDOTDIR=~aspiers as root, where ~aspiers is shared via NFS,
#    reduces root privilege a lot since trust level for NFS write
#    access to ~aspiers is only by anyone who can get a port < 1024.

: ${DEBUG_LOCAL_HOOKS:=1}

process_hook () {
  hook_path="$1"
  
  if [ -z "$hooks_found" ]; then
    hooks_found="$hook_path"
  else
    hooks_found="$hooks_found $hook_path"
  fi

  case "$action" in
    source)
      [ -n "$DEBUG_LOCAL_HOOKS" ] && sh_load_status "$hook_path"
      source "$hook_path"
      ;;
    find)
      ;;
    *)
      echo "Unrecognised run_hooks action $action; aborting." >&2
      return 1
  esac

  return 0
}

should_ignore () {
  dirent="$1"
  ignore=
  case "$dirent" in
    *~)      ignore=y ;;
    *.d)     ignore=y ;;
    *.zwc)   ignore=y ;;
    *.zwc.*) ignore=y ;;
    \#*\#)   ignore=y ;;
    CVS)     ignore=y ;;
    */CVS)   ignore=y ;;
  esac
  [ -n "$ignore" ]
}

iterate_hooks () {
  if [ $# != 2 ]; then
    echo "BUG: iterate_hooks called with wrong # of args: $*" >&2
    return 1
  fi

  action="$1"
  hook="$2"
#   origdir="`pwd`"

  hooks_found=

  if [ -z "$ZDOTDIRPATH" ]; then
    echo "\$ZDOTDIRPATH not defined; don't know where to search for hooks." >&2
    return 1
  fi

  source "$ZDOTDIR/.zsh/functions/enable_nullglob"

  [ -n "$ZSH_VERSION" ] && setopt local_options sh_word_split

  for dir in $ZDOTDIRPATH; do
    if ! [ -d "$dir" ]; then
      if [ -n "$shell_interactive" ]; then
        echo "BUG: $dir in \$ZDOTDIRPATH did not exist" >&2
      fi
      continue
    fi

    hook_d="$dir/$hook"

    # Detect obsolete files from run_local_hooks
    for hook_path in ${hook_d%%.d}.*; do
      [ "$hook_path" = "$hook_d" ] && continue
      if should_ignore "$hook_path"; then
        if [ "$DEBUG_LOCAL_HOOKS" -ge 5 ]; then
          echo "# Ignoring obsolete hook $hook_path"
        fi
        continue
      fi
      echo "WARNING: found obsolete hook $hook_path" >&2
    done

    [ -d "$hook_d" ] || break

#     if ! cd "$hook_d"; then
#       echo "BUG?  Couldn't cd to $hook_d" >&2
#       return 1
#     fi

    for hook_path in $hook_d/*; do
      dirent="${hook_path##*/}"

      if [ "$DEBUG_LOCAL_HOOKS" -ge 3 ]; then
        echo "# Considering possible hook $hook_path"
      fi

      if should_ignore "$dirent"; then
        if [ "$DEBUG_LOCAL_HOOKS" -ge 5 ]; then
          echo "# Ignoring possible hook $dirent"
        fi
        continue
      fi

      # Apply filter for special cases
      special=
      case "$dirent" in
        person-*)
          person="${dirent#person-}"
          [ "$ZDOTUSER" = "$person" ] || continue
          special=y
          ;;
        host-*)
          host="${dirent#host-}"
          # Be lenient with non-FQDN ambiguity
          if [ "${HOSTNAME%.*}" != "${host}"    ] && \
             [ "${HOSTNAME}"    != "${host%.*}" ]
          then
            [ "$DEBUG_LOCAL_HOOKS" -ge 4 ] && \
              echo "#   $hook_path hostname $host does not match \$HOSTNAME $HOSTNAME"
            continue
          fi
          special=y
          ;;
        uid-*)
          uid="${dirent#uid-}"
          if [ "$uid" = 'OWNER' ]; then
            uid=$( stat -c '%U' "$hook_path" ) # portable?
#            uid=$( command ls -l "$hook_path" | awk '{print $3}' ) # sucks
          fi
          if [ "$USERNAME" != "$uid" ]; then
            [ "$DEBUG_LOCAL_HOOKS" -ge 4 ] && \
              echo "#   $hook_path uid $uid does not match \$USERNAME $USERNAME"
            continue
          fi
          special=y
          ;;
      esac

      if [ -n "$special" ]; then
        [ "$DEBUG_LOCAL_HOOKS" -ge 4 ] && \
          echo "# $hook_path is a special case hook"
        if [ -d "$hook_path" ]; then
          for subhook in $hook_path/*; do
            if should_ignore "$subhook"; then
              if [ "$DEBUG_LOCAL_HOOKS" -ge 5 ]; then
                echo "# Ignoring possible subhook $subhook"
              fi
              continue
            fi
            process_hook "$subhook"
          done
        else
          echo "WARNING: $hook_path should be a directory not a file" >&2
          process_hook "$hook_path"
        fi
      else
        if ! [ -d "$hook_path" ]; then
          process_hook "$hook_path"
        fi
      fi
    done
  done

  restore_nullglob
}

run_hooks () {
  if [ $# != 1 ]; then
    echo "Usage: run_hooks <hookname>" >&2
    return 1
  fi

  if [ "$1" = 'DEFUN' ]; then
    # We only want to define the functions above, not do anything.
    # This is for the benefit of find_hooks.
    return 0
  fi
  
  iterate_hooks source "$@"
}

# Ensure we have sh_load_status.  It's missing when an X session starts up.
if type sh_load_status >/dev/null 2>&1; then
#if [ -z "$shared_env_loaded" ]; then
  :
else
  # Catch 22, this would go into infinite recursion:
  # . ${zdotdir:-$HOME}/.shared_env

  sh_load_status () {
    # This should only ever log to .xsession-my-errors anyway
    echo "$0: $*"
  }
fi

run_hooks "$@"
