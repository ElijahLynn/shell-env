#autoload

# NOTE!  This file not only gets used by zsh, but by
# .shared_env, and so has to work when source'd from
# any sh-compatible shell.  Well, any sensible sh.

# Example usage:
#
#   run_hooks .shared_env
#
# would be the last thing executed by ${ZDOTDIR:-$HOME}/.shared_env,
# and would check for files under .shared_env.d in the $zdotdirpath
# search path, which would be this (in order):
#
#   * $ZDOTDIR/.shared_env.d/*
#   * $HOME/.shared_env.d/*
#
# i.e. from least specific to most specific.
#
# Ditto for .zshrc, .bashrc etc.
#
# Additionally, if a filename has one of the following formats,
# it is treated specially:
#
#   * person-$individual_uuid
#   
#     Only run if $individual_uuid equals $ZDOTUSER.  This should
#     be unique to a person (*not* a uid); e-mail addresses are
#     recommended, similar in idea to GNU arch's global archive
#     namespace.
#     
#   * host-$hostname
#
#     Only run if $hostname equals the current hostname.  If there
#     is ambiguity with regards to FQDN or non-FQDN, the code gives
#     the benefit of the doubt in favour of a match.
#
#   * uid-$username
#
#     Only run if $username equals the current (non-numeric) uid.
#     An additional special case: if $username equals 'OWNER', the
#     hook is only run if the current user owns the hook file.
#     This allows uid-specific hooks to be installed in multiple
#     home directories independently of their filename.

# Requirements and rationale for search algorithm:
#
#  * Must allow me to share config with friends.  Accomplished by setting
#    ZDOTDIR to point to my home directory when running as another uid.
#    (We use the parameter name 'ZDOTDIR' because zsh supports it natively
#    when looking for core start-up files, defaulting to $HOME if it's not
#    set.  But we extend the usage of the ZDOTDIR concept via this file
#    to include our own non-core start-up files such as .shared_env.)
#
#  * When others use my config, their environment must not be polluted
#    with stuff specific to me.  Accomplished by keeping all personal
#    stuff in the .${dotfile}.d/person-$ZDOTUSER namespace, where
#    $ZDOTUSER is something globally unique like the individual's
#    email address.  (Although in my case, 'aspiers' is almost
#    certainly "unique enough" for practical purposes, if that
#    expression's not too much of an oxymoron.)
#
#  * Must allow me to switch uid and still use config.  Accomplished by
#    setting ZDOTDIR=~aspiers and ZDOTUSER to my chosen individual UUID
#    value.
#
#  * Must allow per-uid config which would potentially span machines if home
#    directories are shared (e.g. on NFS).  It makes obvious sense to put any
#    per-uid config in the uid's home directory.  This is what the
#    ".${dotfile}.d/uid-OWNER" syntax is for.
# 
#  * Inheritance should be used wherever possible, i.e. ensuring that more
#    settings for specific contexts can override less specific contexts by
#    being loaded later.  [Eh?  You don't need inheritance for that ...]
#
# Other considerations:
#
#  * Current search order doesn't allow specific contexts to override
#    decisions made in less specific contexts without coupling more specific
#    contexts to knowledge of the consequences of those decisions (i.e.
#    you have to know what effects to manually reverse).
#
#  * Finer granularity (more, smaller files) allows easier overriding
#    in specific contexts which solves above issue and makes other
#    things better e.g. setting users/hosts to complete.  This could be
#    prohibitively slow over NFS, but we'll cross that bridge when we come
#    to it, e.g. via some kind of prior compilation into one big .zwc ?
#
#  * Would be nice to provide user with list of things which can be overridden.
#    This can be achieved simply by grepping for run_hooks invocations.
#
#  * Need to support find_hooks for emacs and other non-shell-based
#    environments which invoke the hooks in a different way.#    
#  
#  * ZDOTDIR=~aspiers as root, where ~aspiers is shared via NFS,
#    reduces root privilege a lot since trust level for NFS write
#    access to ~aspiers is only by anyone who can get a port < 1024.

DEBUG_LOCAL_HOOKS=1

iterate_hooks () {
  if [ $# != 2 ]; then
    echo "BUG: find_hooks called with wrong # of args: $*" >&2
    return 1
  fi

  action="$1"
  hook="$2"
#   origdir="`pwd`"

  hooks_found=

  for dir in ${zdotdirpath:-$HOME}; do
    if ! [ -n "$dir" ]; then
      if [ -n "$shell_interactive" ]; then
        echo "BUG: $dir in \$zdotdirpath did not exist" >&2
      fi
      break
    fi

    hook_d="$dir/$hook.d"
    [ -d "$hook_d" ] || break

#     if ! cd "$hook_d"; then
#       echo "BUG?  Couldn't cd to $hook_d" >&2
#       return 1
#     fi

    . "$ZDOTDIR/.zsh/functions/enable_nullglob"
    paths=`echo $dir/$hook.d/*`
    restore_nullglob

    for hook_path in $paths; do
      file="${hook_path##*/}"

      # Apply filter for special cases
      case "$file" in
        person-*)
          person="${file#person-}"
          [ "$ZDOTUSER" = "$person" ] || continue
          ;;
        host-*)
          host="${file#host-}"
          [ "$HOSTNAME" = "$host" ] || continue
          ;;
        uid-*)
          uid="${file#uid-}"
          if [ "$uid" = 'OWNER' ]; then
            uid=$( command ls -l "$hook_path" | awk '{print $3}' ) # hmmm
          fi
          [ "$USERNAME" = "$uid" ] || continue
          ;;
      esac

      if [ -z "$hooks_found" ]; then
        hooks_found="$hook_path"
      else
        hooks_found="$hooks_found $hook_path"
      fi

      case "$action" in
        source)
          [ -n "$DEBUG_LOCAL_HOOKS" ] && sh_load_status "$hook_path"
          source "$hook_path"
          ;;
        find)
          ;;
        *)
          echo "Unrecognised run_hooks action $action; aborting." >&2
          return 1
      esac
    done
  done
}

run_hooks () {
  if [ "$1" = 'DEFUN' ]; then
    # We only want to define the functions above, not do anything.
    # This is for the benefit of find_hooks.
    return 0
  fi
  
  iterate_hooks source "$@"
}

run_hooks "$@"
