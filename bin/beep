#!/usr/bin/perl

use Getopt::Long;

sub usage {
  warn @_, "\n" if @_;

  (my $ME = $0) =~ s,.*/,,;

  die <<EOUSAGE;
Usage: $ME <count> <delay_secs>
Options:
  -h, --help           Show this help
  -v, --verbose[=N]    Increase [specify] verbosity (defaults to 1)
EOUSAGE
}

Getopt::Long::Configure('bundling');

my %opts = ( verbosity => 1 );
GetOptions(
  \%opts,
  'help|h',
  'debug|d',
  'verbosity|verbose|v:+',
  'version|V',
) or usage();
usage() if @ARGV >= 2 or $opts{help};

$| = 1;

my ($count, $sleep) = @ARGV;
$count ||= 1;
$sleep ||= 1;

my @sounds_path = qw(
                      /usr/share/sounds
                      /opt/gnome/share/sounds
                      /opt/gnome2/share/sounds
                      /opt/kde3/share/sounds
                      /opt/kde4/share/sounds
                  );
my @sounds = qw(
                 KDE_Beep_Ahem.wav
                 KDE_Beep_Beep.wav
                 warning.wav
             );
my $sound = find_sound();

sub find_sound {
  for my $path (@sounds_path) {
    debug(3, "Searching $path");
    for my $sound (@sounds) {
      my $full = "$path/$sound";
      if (-r $full) {
        debug(2, "Found $full");
        return $full;
      }
      debug(3, "  Skipping unreadable $full");
    }
  }
  return undef;
}

while ($count) {
  print "\a";
  my $exe = "paplay"; # FIXME: make more robust
  my $cmd = "$exe \Q$sound\E";
  if ($opts{verbosity} == 0) {
    $cmd .= " >/dev/null 2>&1";
  }
  elsif ($opts{verbosity} == 1) {
    $cmd .= " >/dev/null";
  }
  if ($sound) {
    debug(3, "cmd is $cmd");
    system($cmd);
  }
  $count--;
  sleep $sleep if $count;
}

sub debug {
  my $level = shift;
  warn @_, "\n" if $opts{verbosity} >= $level;
}
